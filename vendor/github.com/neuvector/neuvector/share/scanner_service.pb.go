// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scanner_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScanImageRequest struct {
	Registry     string                 `protobuf:"bytes,1,opt,name=Registry" json:"Registry,omitempty"`
	Username     string                 `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password     string                 `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Repository   string                 `protobuf:"bytes,4,opt,name=Repository" json:"Repository,omitempty"`
	Tag          string                 `protobuf:"bytes,5,opt,name=Tag" json:"Tag,omitempty"`
	Proxy        string                 `protobuf:"bytes,6,opt,name=Proxy" json:"Proxy,omitempty"`
	ScanLayers   bool                   `protobuf:"varint,7,opt,name=ScanLayers" json:"ScanLayers,omitempty"`
	ScanSecrets  bool                   `protobuf:"varint,8,opt,name=ScanSecrets" json:"ScanSecrets,omitempty"`
	BaseImage    string                 `protobuf:"bytes,9,opt,name=BaseImage" json:"BaseImage,omitempty"`
	RootsOfTrust []*SigstoreRootOfTrust `protobuf:"bytes,10,rep,name=RootsOfTrust" json:"RootsOfTrust,omitempty"`
	Token        string                 `protobuf:"bytes,11,opt,name=Token" json:"Token,omitempty"`
}

func (m *ScanImageRequest) Reset()                    { *m = ScanImageRequest{} }
func (m *ScanImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ScanImageRequest) ProtoMessage()               {}
func (*ScanImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ScanImageRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *ScanImageRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ScanImageRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ScanImageRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ScanImageRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ScanImageRequest) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func (m *ScanImageRequest) GetScanLayers() bool {
	if m != nil {
		return m.ScanLayers
	}
	return false
}

func (m *ScanImageRequest) GetScanSecrets() bool {
	if m != nil {
		return m.ScanSecrets
	}
	return false
}

func (m *ScanImageRequest) GetBaseImage() string {
	if m != nil {
		return m.BaseImage
	}
	return ""
}

func (m *ScanImageRequest) GetRootsOfTrust() []*SigstoreRootOfTrust {
	if m != nil {
		return m.RootsOfTrust
	}
	return nil
}

func (m *ScanImageRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SigstoreRootOfTrust struct {
	Name           string              `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	RekorPublicKey string              `protobuf:"bytes,2,opt,name=RekorPublicKey" json:"RekorPublicKey,omitempty"`
	RootCert       string              `protobuf:"bytes,3,opt,name=RootCert" json:"RootCert,omitempty"`
	SCTPublicKey   string              `protobuf:"bytes,4,opt,name=SCTPublicKey" json:"SCTPublicKey,omitempty"`
	Verifiers      []*SigstoreVerifier `protobuf:"bytes,5,rep,name=Verifiers" json:"Verifiers,omitempty"`
}

func (m *SigstoreRootOfTrust) Reset()                    { *m = SigstoreRootOfTrust{} }
func (m *SigstoreRootOfTrust) String() string            { return proto.CompactTextString(m) }
func (*SigstoreRootOfTrust) ProtoMessage()               {}
func (*SigstoreRootOfTrust) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *SigstoreRootOfTrust) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetRekorPublicKey() string {
	if m != nil {
		return m.RekorPublicKey
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetRootCert() string {
	if m != nil {
		return m.RootCert
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetSCTPublicKey() string {
	if m != nil {
		return m.SCTPublicKey
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetVerifiers() []*SigstoreVerifier {
	if m != nil {
		return m.Verifiers
	}
	return nil
}

type SigstoreVerifier struct {
	Name           string                  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Type           string                  `protobuf:"bytes,2,opt,name=Type" json:"Type,omitempty"`
	KeypairOptions *SigstoreKeypairOptions `protobuf:"bytes,3,opt,name=KeypairOptions" json:"KeypairOptions,omitempty"`
	KeylessOptions *SigstoreKeylessOptions `protobuf:"bytes,4,opt,name=KeylessOptions" json:"KeylessOptions,omitempty"`
}

func (m *SigstoreVerifier) Reset()                    { *m = SigstoreVerifier{} }
func (m *SigstoreVerifier) String() string            { return proto.CompactTextString(m) }
func (*SigstoreVerifier) ProtoMessage()               {}
func (*SigstoreVerifier) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *SigstoreVerifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SigstoreVerifier) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SigstoreVerifier) GetKeypairOptions() *SigstoreKeypairOptions {
	if m != nil {
		return m.KeypairOptions
	}
	return nil
}

func (m *SigstoreVerifier) GetKeylessOptions() *SigstoreKeylessOptions {
	if m != nil {
		return m.KeylessOptions
	}
	return nil
}

type SigstoreKeypairOptions struct {
	PublicKey string `protobuf:"bytes,1,opt,name=PublicKey" json:"PublicKey,omitempty"`
}

func (m *SigstoreKeypairOptions) Reset()                    { *m = SigstoreKeypairOptions{} }
func (m *SigstoreKeypairOptions) String() string            { return proto.CompactTextString(m) }
func (*SigstoreKeypairOptions) ProtoMessage()               {}
func (*SigstoreKeypairOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *SigstoreKeypairOptions) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type SigstoreKeylessOptions struct {
	CertIssuer  string `protobuf:"bytes,1,opt,name=CertIssuer" json:"CertIssuer,omitempty"`
	CertSubject string `protobuf:"bytes,2,opt,name=CertSubject" json:"CertSubject,omitempty"`
}

func (m *SigstoreKeylessOptions) Reset()                    { *m = SigstoreKeylessOptions{} }
func (m *SigstoreKeylessOptions) String() string            { return proto.CompactTextString(m) }
func (*SigstoreKeylessOptions) ProtoMessage()               {}
func (*SigstoreKeylessOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *SigstoreKeylessOptions) GetCertIssuer() string {
	if m != nil {
		return m.CertIssuer
	}
	return ""
}

func (m *SigstoreKeylessOptions) GetCertSubject() string {
	if m != nil {
		return m.CertSubject
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanImageRequest)(nil), "share.ScanImageRequest")
	proto.RegisterType((*SigstoreRootOfTrust)(nil), "share.SigstoreRootOfTrust")
	proto.RegisterType((*SigstoreVerifier)(nil), "share.SigstoreVerifier")
	proto.RegisterType((*SigstoreKeypairOptions)(nil), "share.SigstoreKeypairOptions")
	proto.RegisterType((*SigstoreKeylessOptions)(nil), "share.SigstoreKeylessOptions")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScannerService service

type ScannerServiceClient interface {
	ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error)
	Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type scannerServiceClient struct {
	cc *grpc.ClientConn
}

func NewScannerServiceClient(cc *grpc.ClientConn) ScannerServiceClient {
	return &scannerServiceClient{cc}
}

func (c *scannerServiceClient) ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanRunning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanImageData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanAppPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ScannerService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ScannerService/ScanAwsLambda", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScannerService service

type ScannerServiceServer interface {
	ScanRunning(context.Context, *ScanRunningRequest) (*ScanResult, error)
	ScanImageData(context.Context, *ScanData) (*ScanResult, error)
	ScanImage(context.Context, *ScanImageRequest) (*ScanResult, error)
	ScanAppPackage(context.Context, *ScanAppRequest) (*ScanResult, error)
	Ping(context.Context, *RPCVoid) (*RPCVoid, error)
	ScanAwsLambda(context.Context, *ScanAwsLambdaRequest) (*ScanResult, error)
}

func RegisterScannerServiceServer(s *grpc.Server, srv ScannerServiceServer) {
	s.RegisterService(&_ScannerService_serviceDesc, srv)
}

func _ScannerService_ScanRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanRunning(ctx, req.(*ScanRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImageData(ctx, req.(*ScanData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImage(ctx, req.(*ScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, req.(*ScanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).Ping(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAwsLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAwsLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAwsLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, req.(*ScanAwsLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ScannerService",
	HandlerType: (*ScannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanRunning",
			Handler:    _ScannerService_ScanRunning_Handler,
		},
		{
			MethodName: "ScanImageData",
			Handler:    _ScannerService_ScanImageData_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _ScannerService_ScanImage_Handler,
		},
		{
			MethodName: "ScanAppPackage",
			Handler:    _ScannerService_ScanAppPackage_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ScannerService_Ping_Handler,
		},
		{
			MethodName: "ScanAwsLambda",
			Handler:    _ScannerService_ScanAwsLambda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner_service.proto",
}

func init() { proto.RegisterFile("scanner_service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0xb7, 0x76, 0xac, 0xaf, 0xa3, 0x0c, 0xc3, 0x58, 0x08, 0x7f, 0x54, 0xf5, 0x30, 0xed,
	0xb4, 0x43, 0x27, 0x40, 0x02, 0x09, 0x54, 0x0a, 0x87, 0x69, 0x13, 0x8b, 0x9c, 0xb2, 0x03, 0x17,
	0xe4, 0xa6, 0x6f, 0x25, 0xb4, 0x8d, 0x83, 0xed, 0x30, 0xf2, 0x0d, 0xf9, 0x18, 0x1c, 0xf8, 0x20,
	0xc8, 0x76, 0xd2, 0xb8, 0x51, 0xc7, 0xcd, 0xef, 0xf7, 0xe7, 0xd9, 0xef, 0x17, 0x3b, 0x70, 0x20,
	0x23, 0x96, 0x24, 0x28, 0xbe, 0x4a, 0x14, 0x3f, 0xe3, 0x08, 0x4f, 0x52, 0xc1, 0x15, 0x27, 0x2d,
	0xf9, 0x8d, 0x09, 0xf4, 0xf7, 0x22, 0xbe, 0x5c, 0xf2, 0xc4, 0x82, 0x3e, 0x68, 0xad, 0x5d, 0xf7,
	0xff, 0x6e, 0xc1, 0x7e, 0x18, 0xb1, 0xe4, 0x6c, 0xc9, 0x66, 0x48, 0xf1, 0x47, 0x86, 0x52, 0x11,
	0x1f, 0x76, 0x29, 0xce, 0x62, 0xa9, 0x44, 0xee, 0x35, 0x7a, 0x8d, 0xe3, 0x36, 0x5d, 0xd5, 0x9a,
	0xfb, 0x2c, 0x51, 0x24, 0x6c, 0x89, 0xde, 0x96, 0xe5, 0xca, 0x5a, 0x73, 0x01, 0x93, 0xf2, 0x86,
	0x8b, 0xa9, 0xb7, 0x6d, 0xb9, 0xb2, 0x26, 0xcf, 0x01, 0x28, 0xa6, 0x5c, 0xc6, 0x8a, 0x8b, 0xdc,
	0x6b, 0x1a, 0xd6, 0x41, 0xc8, 0x3e, 0x6c, 0x8f, 0xd9, 0xcc, 0x6b, 0x19, 0x42, 0x2f, 0xc9, 0x43,
	0x68, 0x05, 0x82, 0xff, 0xca, 0xbd, 0x1d, 0x83, 0xd9, 0x42, 0xf7, 0xd1, 0xe7, 0xbd, 0x60, 0x39,
	0x0a, 0xe9, 0xdd, 0xe9, 0x35, 0x8e, 0x77, 0xa9, 0x83, 0x90, 0x1e, 0x74, 0x74, 0x15, 0x62, 0x24,
	0x50, 0x49, 0x6f, 0xd7, 0x08, 0x5c, 0x88, 0x3c, 0x85, 0xf6, 0x7b, 0x26, 0xd1, 0x4c, 0xec, 0xb5,
	0x4d, 0xef, 0x0a, 0x20, 0x6f, 0x61, 0x8f, 0x72, 0xae, 0xe4, 0xe5, 0xf5, 0x58, 0x64, 0x52, 0x79,
	0xd0, 0xdb, 0x3e, 0xee, 0x0c, 0xfc, 0x13, 0x13, 0xe4, 0x49, 0x18, 0xcf, 0xa4, 0xe2, 0x02, 0xb5,
	0xa4, 0x50, 0xd0, 0x35, 0xbd, 0x3e, 0xf5, 0x98, 0xcf, 0x31, 0xf1, 0x3a, 0xf6, 0xd4, 0xa6, 0xe8,
	0xff, 0x6e, 0xc0, 0x83, 0x0d, 0x5e, 0x42, 0xa0, 0xf9, 0x49, 0x27, 0x69, 0x53, 0x36, 0x6b, 0x72,
	0x04, 0x5d, 0x8a, 0x73, 0x2e, 0x82, 0x6c, 0xb2, 0x88, 0xa3, 0x73, 0xcc, 0x8b, 0x9c, 0x6b, 0xa8,
	0xf9, 0x4a, 0x9c, 0xab, 0x11, 0x0a, 0x55, 0xa6, 0x5d, 0xd6, 0xa4, 0x0f, 0x7b, 0xe1, 0x68, 0x5c,
	0x75, 0xb0, 0x79, 0xaf, 0x61, 0xe4, 0x05, 0xb4, 0xaf, 0x50, 0xc4, 0xd7, 0xb1, 0x0e, 0xb2, 0x65,
	0xc6, 0x3c, 0xac, 0x8d, 0x59, 0xf2, 0xb4, 0x52, 0xea, 0x51, 0xf6, 0xeb, 0xfc, 0xc6, 0x39, 0x08,
	0x34, 0xc7, 0x79, 0x5a, 0xde, 0x12, 0xb3, 0x26, 0x1f, 0xa1, 0x7b, 0x8e, 0x79, 0xca, 0x62, 0x71,
	0x99, 0xaa, 0x98, 0x27, 0xd2, 0x9c, 0xbc, 0x33, 0x78, 0x56, 0xdb, 0x78, 0x5d, 0x44, 0x6b, 0xa6,
	0xa2, 0xcd, 0x02, 0xa5, 0x2c, 0xdb, 0x34, 0x6f, 0x6b, 0xe3, 0x88, 0x68, 0xcd, 0xd4, 0x7f, 0x09,
	0x8f, 0x36, 0x6f, 0xa8, 0xef, 0x48, 0x15, 0x9e, 0x1d, 0xaa, 0x02, 0xfa, 0x5f, 0xd6, 0x7c, 0x4e,
	0x47, 0x7d, 0x3b, 0x75, 0xfe, 0x67, 0x52, 0x66, 0x28, 0x0a, 0xa3, 0x83, 0xe8, 0xdb, 0xa9, 0xab,
	0x30, 0x9b, 0x7c, 0xc7, 0x48, 0x15, 0xd1, 0xb8, 0xd0, 0xe0, 0xcf, 0x16, 0x74, 0x43, 0xfb, 0x96,
	0x43, 0xfb, 0x94, 0xc9, 0x1b, 0x7b, 0xa5, 0x69, 0x96, 0x24, 0x71, 0x32, 0x23, 0x8f, 0xcb, 0x21,
	0x2b, 0xac, 0x78, 0xb8, 0xfe, 0x7d, 0x97, 0x42, 0x99, 0x2d, 0x14, 0x39, 0x85, 0xbb, 0xab, 0xf7,
	0xfd, 0x81, 0x29, 0x46, 0xee, 0x39, 0x1a, 0x0d, 0x6c, 0x32, 0xbd, 0x82, 0xf6, 0xca, 0x44, 0x0e,
	0x1d, 0xde, 0xfd, 0x4d, 0x6c, 0x32, 0xbe, 0xb6, 0x87, 0x1f, 0xa6, 0x69, 0xc0, 0xa2, 0xb9, 0x76,
	0x1f, 0x38, 0xa2, 0x61, 0x9a, 0xfe, 0xc7, 0x7b, 0x04, 0xcd, 0x40, 0xcf, 0xd7, 0x2d, 0x28, 0x1a,
	0x8c, 0xae, 0x78, 0x3c, 0xf5, 0x6b, 0x35, 0x79, 0x67, 0x27, 0x1a, 0xde, 0xc8, 0x0b, 0xb6, 0x9c,
	0x4c, 0x19, 0x79, 0xe2, 0x6e, 0x51, 0xa2, 0xb7, 0x6f, 0x34, 0xd9, 0x31, 0xbf, 0xbe, 0xd3, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xb1, 0xa6, 0x8d, 0x34, 0x05, 0x00, 0x00,
}
